/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { RigidBody } from '@react-three/rapier'

type GLTFResult = GLTF & {
  nodes: {
    SM_FenceSM_Fence1_1: THREE.Mesh
    SM_FenceSM_Fence1_1_1: THREE.Mesh
    SM_FenceSM_Fence1_1_2: THREE.Mesh
  }
  materials: {
    lambert2SG: THREE.MeshStandardMaterial
    lambert4SG: THREE.MeshStandardMaterial
    lambert3SG: THREE.MeshStandardMaterial
  }
}

export function FenceShort(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/models/FenceShort.glb') as GLTFResult
  return (
    <group {...props} dispose={null} scale={[3.5, 1.5, 3.5]}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.SM_FenceSM_Fence1_1.geometry}
        material={materials.lambert2SG}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.SM_FenceSM_Fence1_1_1.geometry}
        material={materials.lambert4SG}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.SM_FenceSM_Fence1_1_2.geometry}
        material={materials.lambert3SG}
      />
    </group>
  )
}

useGLTF.preload('/models/FenceShort.glb')
