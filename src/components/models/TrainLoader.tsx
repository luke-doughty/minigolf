/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { FC, useRef } from 'react'
import { TrailTexture, useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useFrame } from '@react-three/fiber'
import { Group, Object3DEventMap, Vector3, Vector3Like } from 'three'
import { RapierRigidBody, RigidBody, RigidBodyProps } from '@react-three/rapier'
import { TrainFront } from './TrainFront'
import { TrainMiddle } from './TrainMiddle'

type GLTFResult = GLTF & {
  nodes: {
    Wheel_a: THREE.Mesh
    Wheel_b: THREE.Mesh
    Wheel_c: THREE.Mesh
    Wheel_d: THREE.Mesh
    Wheel_e: THREE.Mesh
    Wheel_f: THREE.Mesh
    Wheel_g: THREE.Mesh
    Wheel_h: THREE.Mesh
    Railway_carriage_d: THREE.Mesh
  }
  materials: {
    lambert3SG: THREE.MeshStandardMaterial
  }
}
interface TrainProps extends RigidBodyProps {
  initialPos: Vector3
}

/**
 * TrainLoader component.
 *
 * This loads the rear carriage and merges the front & centre carriage into one model.
 *
 * @param {TrainProps} Props - The properties for the TrainLoader component.
 * @returns {JSX.Element} The rendered TrainLoader component.
 */
export const Train: FC<TrainProps> = ({
  initialPos,
  ...props
}: TrainProps): JSX.Element => {
  const trainRigidRef = useRef<RapierRigidBody>(null!)

  const radius = 32
  const speed = 1 / 1.5 // controls the speed of movement along the circle

  useFrame(({ clock }) => {
    if (trainRigidRef.current) {
      const elapsedTime = clock.getElapsedTime()

      const x = initialPos.x + radius * Math.cos(elapsedTime * speed)
      const z = initialPos.z + radius * Math.sin(elapsedTime * speed)

      const dx = -radius * Math.sin(elapsedTime * speed)
      const dz = radius * Math.cos(elapsedTime * speed)

      const angle = Math.atan2(dx, dz)
      const quaternion = new THREE.Quaternion()
      quaternion.setFromEuler(new THREE.Euler(0, angle, 0, 'YXZ'))

      trainRigidRef.current.setTranslation({ x, y: initialPos.y, z }, true)
      trainRigidRef.current.setRotation(quaternion, true)
    }
  })
  const { nodes, materials } = useGLTF('/Railway car.glb') as GLTFResult
  return (
    <RigidBody type='kinematicPosition' colliders={'cuboid'} ref={trainRigidRef}>
      <group scale={[0.029, 0.029, 0.029]}>
        <TrainFront position={[-100, 0, -510]} rotation={[0, (Math.PI / 128) * 14, 0]} />
        <TrainMiddle />
        <group
          {...props}
          dispose={null}
          position={[-105, 0, 510]}
          rotation={[0, (Math.PI / 128) * 114, 0]}
        >
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Wheel_a.geometry}
            material={materials.lambert3SG}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Wheel_b.geometry}
            material={materials.lambert3SG}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Wheel_c.geometry}
            material={materials.lambert3SG}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Wheel_d.geometry}
            material={materials.lambert3SG}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Wheel_e.geometry}
            material={materials.lambert3SG}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Wheel_f.geometry}
            material={materials.lambert3SG}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Wheel_g.geometry}
            material={materials.lambert3SG}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Wheel_h.geometry}
            material={materials.lambert3SG}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Railway_carriage_d.geometry}
            material={materials.lambert3SG}
          />
        </group>
      </group>
    </RigidBody>
  )
}

useGLTF.preload('/Railway carriage rear.glb')
