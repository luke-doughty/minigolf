/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { FC, useEffect, useRef, useState } from 'react'
import { PositionalAudio, TrailTexture, useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useFrame, useLoader, useThree } from '@react-three/fiber'
import { Group, Object3DEventMap, Vector3, Vector3Like } from 'three'
import { RapierRigidBody, RigidBody, RigidBodyProps } from '@react-three/rapier'
import { TrainFront } from './TrainFront'
import { TrainMiddle } from './TrainMiddle'
import { SteamTrainCarriage } from './SteamTrainCarraige'

type GLTFResult = GLTF & {
  nodes: {
    Wheel_a: THREE.Mesh
    Wheel_b: THREE.Mesh
    Wheel_c: THREE.Mesh
    Wheel_d: THREE.Mesh
    Wheel_e: THREE.Mesh
    Wheel_f: THREE.Mesh
    Wheel_g: THREE.Mesh
    Wheel_h: THREE.Mesh
    Railway_carriage_d: THREE.Mesh
  }
  materials: {
    lambert3SG: THREE.MeshStandardMaterial
  }
}
interface TrainProps extends RigidBodyProps {
  initialPos: Vector3
}

/**
 * TrainLoader component.
 *
 * This loads the rear carriage and merges the front & centre carriage into one model.
 *
 * @param {TrainProps} Props - The properties for the TrainLoader component.
 * @returns {JSX.Element} The rendered TrainLoader component.
 */
export const Train: FC<TrainProps> = ({
  initialPos,
  ...props
}: TrainProps): JSX.Element => {
  const trainRigidRef = useRef<RapierRigidBody>(null!)
  const sound = useRef<THREE.PositionalAudio>(null)

  const radius = 30
  const speed = 1 / 1.45 // controls the speed of movement along the circle

  useFrame(({ clock }) => {
    if (trainRigidRef.current) {
      const elapsedTime = clock.getElapsedTime()

      const x = initialPos.x + radius * Math.cos(elapsedTime * speed)
      const z = initialPos.z + radius * Math.sin(elapsedTime * speed)

      const dx = -radius * Math.sin(elapsedTime * speed)
      const dz = radius * Math.cos(elapsedTime * speed)

      const angle = Math.atan2(dx, dz)
      const quaternion = new THREE.Quaternion()
      quaternion.setFromEuler(new THREE.Euler(0, angle, 0, 'YXZ'))

      trainRigidRef.current.setTranslation({ x, y: initialPos.y, z }, true)
      trainRigidRef.current.setRotation(quaternion, true)
    }
  })

  // interface url {
  //   url: string
  // }
  // const Sound: FC<url> = ({ url }): JSX.Element => {
  //   const [listener] = useState(() => new THREE.AudioListener())
  //   const buffer = useLoader(THREE.AudioLoader, url)

  //   useFrame(({ camera }) => {
  //     if (sound.current) {
  //       sound.current.setBuffer(buffer)
  //       sound.current.setLoop(true)
  //       sound.current.setRefDistance(0.5)
  //       sound.current.setRolloffFactor(1)
  //       sound.current.setMaxDistance(1)
  //       sound.current.setPlaybackRate(2)
  //       sound.current.play()
  //     }

  //     camera.add(listener)

  //     return () => {
  //       if (listener && camera) {
  //         camera.remove(listener)
  //       }
  //     }
  //   })

  //   return <positionalAudio ref={sound} args={[listener]} position={initialPos} />
  // }

  return (
    <>
      <RigidBody type='kinematicPosition' colliders={'cuboid'} ref={trainRigidRef}>
        {/* <Sound url={'/audio/Train.mp3'} /> */}
        <group scale={[0.029, 0.029, 0.029]} position={[0, -1.6, 0]}>
          <TrainFront position={[-40, 0, 600]} rotation={[0, (Math.PI / 128) * 42, 0]} />
          <SteamTrainCarriage
            position={[100, 0, 325]}
            rotation={[0, (Math.PI / 128) * 53, 0]}
          />
          <SteamTrainCarriage
            position={[140, 0, 5]}
            rotation={[0, (Math.PI / 128) * 65, 0]}
          />
          <SteamTrainCarriage
            position={[90, 0, -320]}
            rotation={[0, (Math.PI / 128) * -54, 0]}
          />
          <SteamTrainCarriage
            position={[-44, 0, -620]}
            rotation={[0, (Math.PI / 128) * -40, 0]}
          />
          <SteamTrainCarriage
            position={[-255, 0, -870]}
            rotation={[0, (Math.PI / 128) * -30, 0]}
          />
          <SteamTrainCarriage
            position={[-520, 0, -1050]}
            rotation={[0, (Math.PI / 128) * -18, 0]}
          />
          <SteamTrainCarriage
            position={[-833, 0, -1150]}
            rotation={[0, (Math.PI / 128) * -8, 0]}
          />
          <SteamTrainCarriage
            position={[-1164, 0, -1167]}
            rotation={[0, (Math.PI / 128) * 5, 0]}
          />
        </group>
      </RigidBody>
    </>
  )
}

useGLTF.preload('/Railway carriage rear.glb')
